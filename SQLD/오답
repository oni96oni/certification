GROUP BY [ROLLUP, GROUPING SET, CUBE]
    https://velog.io/@dongchyeon/%EC%98%A4%EB%9D%BC%ED%81%B4Oracle-%EA%B7%B8%EB%A3%B9-%ED%95%A8%EC%88%98-ROLLUP-CUBE-GROUPING-%EB%93%B1

계층형쿼리
    https://grandma-coding.tistory.com/entry/Oracle-%EA%B3%84%EC%B8%B5%ED%98%95-%EC%BF%BC%EB%A6%AC-%EC%89%AC%EC%9A%B4-%EC%A0%95%EB%A6%ACSTART-WITH-CONNECT-BY

    START WITH 절에서 필터링된 시작 데이터는 결과목록에 포함되어지며, 이후 CONNECT BY절에 의해 필터링 된다.

    오라클 계층형 질의문에서 PRIOR 키워드는 SELECT, WHERE 절에서도 사용할 수 있다.

sql server vs oracle
    1. 컬럼 정보 수정시 oracle은 한번에 여러컬럼 수정가능, sql server는 한번에 한컬럼씩만 수정가능
    2. 컬럼 정보 수정시 oracle은 괄호사용 o, sql server는 괄호사용 x
    3. DDL문장 수행 후 ORACLE은 자동 COMMIT, SQL SERVER는 수동 COMMIT
    4. DDL문장 수행 후 ORACLE은 트랜잭션 종료, SQL SERVER는 DDL도 트랜잭션의 범주에 포함
    5. NULL타입 컬럼에 빈값('')으로 INSERT시 ORACLE은 NULL로 입력, SQL SERVER는 빈값('')
    6. 

ALTER TABLE 테이블명 ADD CONSTRAINT : 제약조건 추가시 CONSTRAINT 써주어야 한다.

ON DELETE CASCADE가 FK의 제약으로 잡혀있을때는 부모 테이블의 레코드가 삭제될 때 자식 테이블의 해당 레코드도 삭제된다는 것을 의미합니다.
    (외래 키 제약 조건)
    그 외에도 
    
    ON DELETE OR MODIFY
    RESTRICT    : 부모 테이블의 레코드가 삭제, 업데이트될 때 자식 테이블의 해당 레코드를 삭제, 업데이트하지 않습니다.
    CASCADE     : 부모 테이블의 레코드가 삭제, 업데이트될 때 자식 테이블의 해당 레코드도 삭제, 업데이트합니다.
    SET NULL    : 부모 테이블의 레코드가 삭제, 업데이트될 때 자식 테이블의 해당 레코드의 foreign_key 필드를 NULL로 설정합니다.
    SET DEFAULT : 부모 테이블의 레코드가 삭제, 업데이트될 때 필드 DEFAULT 값으로 설정
    NO ACTION   : 부모 테이블의 레코드가 삭제, 업데이트될 때 오류가 발생합니다.

    ON INSERT
    DEPENDENT   : 자식 삽입 시 부모 테이블에 pk가 존재할때만 자식에 삽입
    AUTOMATIC   : 자식 삽입 시 부모테이블에 pk 없으면 부모 pk 생성 후 자식에 삽입
    SET NULL    : 부모 테이블의 레코드가 삭제, 업데이트될 때 자식 테이블의 해당 레코드의 foreign_key 필드를 NULL로 설정합니다.
    SET DEFAULT : 부모 테이블의 레코드가 삭제, 업데이트될 때 필드 DEFAULT 값으로 설정
    NO ACTION   : 부모 테이블의 레코드가 삭제, 업데이트될 때 오류가 발생합니다.

테이블 생성문에서 이미 PK를 지정하였으면 추후에 ALTER TABLE 문장에서 PK로 지정해주려고 할때 오류가 발생한다.
    NOT NULL로 설정하고 생성한 테이블 생성문 이후에 ALTER TABLE [테이블명] ALTER CONSTRAINT PK를 사용하는건 OK

참조 무결성 제약이란?
    참조 무결성 제약은 외래 키 제약을 사용하여 두 테이블 간의 관계를 유지하는 것입니다.
    외래 키는 하나의 테이블의 필드가 다른 테이블의 필드를 참조하는 관계를 정의합니다.
    참조 무결성 제약은 외래 키의 값이 참조하는 테이블의 기본 키 값과 일치해야 한다는 것을 의미합니다.

count(*) vs count(컬럼명)의 차이점
    count(*)와 count(컬럼명)은 모두 SELECT문에서 사용되는 집계함수입니다.
    count(*)는 테이블의 모든 행 수를 반환하고(NULL 포함), count(컬럼명)은 컬럼의 값이 NULL이 아닌 행 수를 반환합니다.

VARCHAR2 타입 컬럼에 '1'처럼 넣는게 아니라 1이렇게 넣어도 정상적으로 수행이되나? (!)
    안된다 문제 오타인듯하다.

FK 제약조건이 걸린 부모테이블 컬럼을 삭제가 가능? (!)
    가능하다 단 자식테이블의 컬럼 값이 NOT NULL 이고 제약조건이 DELETE SET NULL 인경우에는 NULL로 세팅하려 하지만
    컬럼 값의 조건이 NOT NULL 인 경우 실패한다.

TRUNCATE TABLE 과 DROP TABLE은 로그를 남기지 않는다.

트랜잭션에 대한 격리성이 낮은 경우 발생할 수 있는 문제점은 다음과 같습니다.
    Dirty Read
        Dirty Read는 트랜잭션이 커밋되지 않은 데이터를 읽는 것을 허용하는 격리 수준에서 발생할 수 있는 문제점입니다.
        이로 인해 트랜잭션이 커밋되지 않은 데이터를 기반으로 작업을 수행하게 되어 데이터 무결성이 깨질 수 있습니다.

        예를 들어, 트랜잭션 T1이 제품의 재고를 100개로 업데이트하는 작업을 수행하고 있습니다.
        이때 트랜잭션 T2가 제품의 재고를 조회하면 100개의 재고가 있는 것으로 나타납니다.
        그러나 트랜잭션 T1이 작업을 완료하기 전에 트랜잭션 T2가 롤백되면 재고는 100개가 아니라 0개가 됩니다.
        트랜잭션 T2는 100개의 재고가 있는 것으로 잘못 판단하고 작업을 수행하게 되어 데이터 무결성이 깨지게 됩니다.

    Non-Repeatable Read
        Non-Repeatable Read는 트랜잭션이 동일한 데이터를 반복해서 읽을 때마다 동일한 값을 읽을 수 없는 격리 수준에서
        발생할 수 있는 문제점입니다. 이로 인해 트랜잭션이 동일한 데이터를 기반으로 작업을 수행할 때 오류가 발생할 수 있습니다.

        예를 들어, 트랜잭션 T1이 고객의 이름을 "홍길동"으로 업데이트하는 작업을 수행하고 있습니다.
        이때 트랜잭션 T2가 고객의 이름을 조회하면 "홍길동"으로 나타납니다. 그러나 트랜잭션 T1이 작업을 완료하기 전에
        트랜잭션 T2가 고객의 이름을 "김길동"으로 변경하면 트랜잭션 T2가 다시 고객의 이름을 조회하면 "김길동"으로 나타납니다.
        트랜잭션 T2는 처음에 "홍길동"으로 나타났던 이름이 "김길동"으로 변경된 것을 보고 오류를 인식할 수 있습니다.

    Phantom Read
        Phantom Read는 트랜잭션이 특정 조건을 만족하는 데이터를 읽을 때마다 다른 데이터가 존재하는 것처럼 보이는
        격리 수준에서 발생할 수 있는 문제점입니다. 이로 인해 트랜잭션이 동일한 데이터를 기반으로 작업을 수행할 때
        오류가 발생할 수 있습니다.

        예를 들어, 트랜잭션 T1이 특정 조건을 만족하는 고객의 목록을 조회하는 작업을 수행하고 있습니다.
        이때 트랜잭션 T2가 조건을 만족하는 고객을 추가하면 트랜잭션 T1은 조건을 만족하는 고객의 목록이 변경된 것으로
        인식할 수 있습니다. 그러나 트랜잭션 T1이 작업을 완료하기 전에 트랜잭션 T2가 고객을 삭제하면 트랜잭션 T1은 조건을
        만족하는 고객의 목록이 변경되지 않은 것으로 인식할 수 있습니다. 트랜잭션 T1은 처음에 조건을 만족하는 고객이
        존재하는 것으로 나타났지만 실제로는 존재하지 않는 것으로 인식할 수 있습니다.

    트랜잭션의 단계별 발생할 수 있는 문제
        READ UNCOMMITTED: 가장 낮은 격리 수준으로, 트랜잭션이 커밋되지 않은 데이터를 읽을 수 있습니다.
            이로 인해 Dirty Read, Non-Repeatable Read, Phantom Read와 같은 문제점이 발생할 수 있습니다.
        READ COMMITTED: 트랜잭션이 커밋된 데이터만 읽을 수 있습니다. Dirty Read 문제점을 해결할 수 있지만,
            Non-Repeatable Read와 Phantom Read 문제점은 여전히 발생할 수 있습니다.
        REPEATABLE READ: 트랜잭션이 동일한 데이터를 반복해서 읽을 때마다 동일한 값을 읽을 수 있도록 보장합니다.
            Non-Repeatable Read 문제점을 해결할 수 있습니다.
        SERIALIZABLE: 트랜잭션이 동시에 실행되는 것을 방지하여 Phantom Read 문제점을 해결합니다.
            가장 높은 격리 수준이지만, 성능이 가장 느립니다.

다중행 함수도 단일행 함수와 동일하게 단일 값만을 반환한다.
    다중행은 여러행을 대상으로 계산
    단일행은 한가지 행을 대상으로 계산

ORACLE에서 REPLACE는 인자값에 따라 역할이 달라진다.
    인자 2개 A, B -> A에서 B제거
    인자 3개 A, B, C -> A에서 B를 C로 대체

ORACLE에서 LENGTH 사용시 CHR(10) : 줄바꿈 도 1로 카운트한다.

SEARCHED_CASE_EXPRESSION : SELECT CASE WHEN LOC = 'NEW YORK' THEN 'EAST'
VS
SIMPLE_CASE_EXPRESSION   : SELECT CASE LOC WHEN 'NEW YORK' THEN 'EAST'

0/300 = 0
300/0 = 에러
100/NULL = NULL

GROUP BY에 안넣은컬럼을 SELECT문에 사용하고 싶을때는 MIN이나 MAX를 사용하기도 한다.

SELECT 절에 없는 컬럼은 ORDER BY에 사용할 수 있다고한다.
    하지만 인라인뷰에서 가져왔다면 그 뷰안에있는 컬럼만 사용가능하다.

인덱스/옵티마이저
    https://sy-log.tistory.com/77

OLTP는 Online Transaction Processing의 약자로, "온라인 트랜잭션 처리"

btree구조
    https://rebro.kr/167

조인수행원리
    https://dataonair.or.kr/db-tech-reference/d-guide/sql/?mod=document&uid=356

JOIN조건 WHERE조건의 차이점
    테이블 연결대상과, 결과집합을 필터링하는것의 차이

UNION ALL을 사용하는 경우 칼럼 ALIAS는 첫번째 SQL모듈 기준으로 표시

동작 방식에 따른 서브쿼리 분류
    Un-Correlated (비 연관) 서브쿼리 : 서브쿼리가 메인쿼리 컬럼을 가지고 있지 않은 형태.
        메인쿼리에 값을 제공하기 위한 목적으로 주로 사용된다.

    Correlate(연관) 서브쿼리 : 서브쿼리가 메인쿼리 컬럼을 가지고 있는 형태.
        일반적으로 메인쿼리가 먼저 수행되어 읽혀진 데이터를 서브쿼리에서 조건이 맞는지 확인하고자 할 때 주로 사용된다. 

https://velog.io/@flobeeee/SQLD-SQL-%EC%9E%90%EA%B2%A9%EA%B2%80%EC%A0%95-%EC%8B%A4%EC%A0%84%EB%AC%B8%EC%A0%9C-%EC%98%A4%EB%8B%B5%EB%85%B8%ED%8A%B8-5.5